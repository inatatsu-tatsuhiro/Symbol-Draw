{"version":3,"sources":["features/connect/Presenter.tsx","features/connect/index.tsx","libs/Symbol/ImageIO.ts","components/elements/TextField/index.tsx","components/utils/Centering/index.tsx"],"names":["apiEndpoint","epochAdjustment","acc","Account","createFromPrivateKey","MPage","txHashRef","useRef","mosaicRef","checkRef","useState","mosaicId","setMosaicId","illustMosaic","setIllustMosaic","Root","Centering","direction","holizontal","Spacer","margin","TextField","text","inputRef","Wrapper","Box","sx","flexGrow","Button","onClick","current","key","KeyGenerator","generateUInt64Key","mid","value","metadataTransaction","MosaicMetadataTransaction","create","Deadline","address","MosaicId","length","aggregateTransaction","AggregateTransaction","createComplete","toAggregate","publicAccount","UInt64","fromUint","signedTx","sign","RepositoryFactoryHttp","createTransactionRepository","announce","subscribe","x","console","log","err","error","metadataHttp","createMetadataRepository","searchCriteria","targetId","metadataType","MetadataType","Mosaic","search","metadataEntries","pageSize","pageNumber","data","forEach","entry","metadataEntry","scopedMetadataKey","toHex","getFile","then","MosaicCard","Text","Img","src","width","height","alt","styled","Container","G_HASH","NODE","EPOCH","hash","a","Promise","resolve","reject","checkConfirmed","tx","TransferTransaction","h","JSON","parse","message","payload","innerTxJoin","catch","timer","setInterval","checkUnConfirmed","setTimeout","clearInterval","getApostilleFile","previousHash","join","transactionHttp","res","rej","getTransaction","TransactionGroup","Unconfirmed","toPromise","Confirmed","repositoryFactory","agtx","innerTxs","innerTransactions","inTx","saveFile","base64img","gameMode","signer","NetworkType","TEST_NET","Address","createFromRawAddress","array","MSG_SIZE","i","Math","floor","arr","slice","push","txs","agtxs","hashes","PlainMessage","stringify","version","name","mode","substr","st","Component","args","fullWidth","htmlFor","label","nowrap","vertical","items","children","Style","wrap","props"],"mappings":"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","file":"static/js/9.bc7b50e5.chunk.js","sourcesContent":["import { Box } from '@mui/material'\nimport styled from '@emotion/styled'\n\nimport React, { useRef, useState } from 'react'\nimport TextField from '../../components/elements/TextField'\nimport Button from '../../components/elements/Button'\n\nimport Centering from '../../components/utils/Centering'\nimport Spacer from '../../components/utils/Spacer'\nimport {\n  Account,\n  AggregateTransaction,\n  Deadline,\n  KeyGenerator,\n  Metadata,\n  MetadataType,\n  MosaicId,\n  MosaicMetadataTransaction,\n  RepositoryFactoryHttp,\n  UInt64,\n  Page,\n} from 'symbol-sdk'\nimport { getFile } from '../../libs/Symbol/ImageIO'\n\nconst apiEndpoint = 'https://sym-test-01.opening-line.jp:3001' //config.SYMBOL_API_ENDPOINT\nconst generationHash =\n  '7FCCD304802016BEBBCD342A332F91FF1F3BB5E902988B352697BE245F48E836' //config.GENERATION_HASH_SEED\n// const feeMultiplier = 200 //config.FEE_MULTIPLIER\nconst epochAdjustment = 1637848847 //config.EPOCH_ADJUSTMENT\nconst networkType = 152 //config.NETWORK_TYPE\nconst master =\n  '891D9D7E9672925123CFB7766CE9AC740BAFED43AE78F64CE2D296F54E62E57A'\n\nconst acc = Account.createFromPrivateKey(master, networkType)\n\nconst MPage: React.VFC = () => {\n  const txHashRef = useRef<HTMLInputElement>(null)\n  const mosaicRef = useRef<HTMLInputElement>(null)\n  const checkRef = useRef<HTMLInputElement>(null)\n\n  const [mosaicId, setMosaicId] = useState('')\n\n  const [illustMosaic, setIllustMosaic] = useState('')\n  const check = () => {\n    if (checkRef === null || checkRef.current === null) {\n      return\n    }\n    const mid = new MosaicId(checkRef.current.value)\n    console.log('mid', mid)\n    setMosaicId(checkRef.current.value)\n\n    const repositoryFactory = new RepositoryFactoryHttp(apiEndpoint)\n    const metadataHttp = repositoryFactory.createMetadataRepository()\n\n    const searchCriteria = {\n      targetId: mid,\n      metadataType: MetadataType.Mosaic,\n    }\n    metadataHttp.search(searchCriteria).subscribe(\n      (metadataEntries: Page<Metadata>) => {\n        if (metadataEntries.pageSize > 0) {\n          console.log('Page', metadataEntries.pageNumber)\n          metadataEntries.data.forEach((entry: Metadata) => {\n            const metadataEntry = entry.metadataEntry\n            console.log('Key:\\t', metadataEntry.scopedMetadataKey.toHex())\n            if (\n              metadataEntry.scopedMetadataKey.toHex() === 'F5CC2D09ED048388'\n            ) {\n              console.log('Value:\\t', metadataEntry.value)\n              getFile(metadataEntry.value).then((data) => {\n                setIllustMosaic(data)\n              })\n            }\n          })\n        } else {\n          console.log('\\n The mosaic does not have metadata entries assigned.')\n        }\n      },\n      (err) => console.log(err)\n    )\n  }\n  const link = () => {\n    if (\n      mosaicRef === null ||\n      mosaicRef.current === null ||\n      txHashRef === null ||\n      txHashRef.current === null\n    ) {\n      return\n    }\n    const key = KeyGenerator.generateUInt64Key('CERT')\n    const mid = mosaicRef.current.value\n    const value = txHashRef.current.value\n\n    const metadataTransaction = MosaicMetadataTransaction.create(\n      Deadline.create(epochAdjustment),\n      acc.address,\n      key,\n      new MosaicId(mid),\n      value.length,\n      value,\n      networkType\n    )\n\n    const aggregateTransaction = AggregateTransaction.createComplete(\n      Deadline.create(epochAdjustment),\n      [metadataTransaction.toAggregate(acc.publicAccount)],\n      networkType,\n      [],\n      UInt64.fromUint(2000000)\n    )\n\n    const signedTx = acc.sign(aggregateTransaction, generationHash)\n\n    const repositoryFactory = new RepositoryFactoryHttp(apiEndpoint)\n    const transactionHttp = repositoryFactory.createTransactionRepository()\n\n    transactionHttp.announce(signedTx).subscribe(\n      (x) => console.log(x),\n      (err) => console.error(err)\n    )\n  }\n  return (\n    <Root>\n      <Centering direction=\"column\" holizontal=\"start\">\n        <Spacer margin=\"8px\"></Spacer>\n        <TextField text=\"TxHash\" inputRef={txHashRef} />\n        <Spacer margin=\"8px\"></Spacer>\n        <TextField text=\"MosaicID\" inputRef={mosaicRef} />\n        <Wrapper>\n          <Box sx={{ flexGrow: 1 }} />\n          <Spacer margin=\"8px\">\n            <Button text=\"LINK\" onClick={link} />\n          </Spacer>\n        </Wrapper>\n        <Spacer margin=\"32px\"></Spacer>\n        <TextField text=\"MosaicID\" inputRef={checkRef} />\n        <Wrapper>\n          <Box sx={{ flexGrow: 1 }} />\n          <Spacer margin=\"8px\">\n            <Button text=\"CHECK\" onClick={check} />\n          </Spacer>\n        </Wrapper>\n      </Centering>\n      {illustMosaic !== '' && (\n        <MosaicCard>\n          <Text>MosaicID: {mosaicId}</Text>\n          <Img\n            src={illustMosaic}\n            width=\"500px\"\n            height=\"500px\"\n            alt=\"ilustmosaic\"\n          />\n        </MosaicCard>\n      )}\n    </Root>\n  )\n}\n\nexport default MPage\nconst Wrapper = styled('div')`\n  display: flex;\n`\n\nconst Root = styled('div')`\n  display: flex;\n  flex-direction: column;\n`\n\nconst MosaicCard = styled('div')`\n  border: 1px solid #b429f9;\n  border-radius: 16px;\n  margin: 16px;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`\n\nconst Text = styled('div')`\n  font-size: 48px;\n`\n\nconst Img = styled('img')`\n  border: 1px solid black;\n`\n","import React from 'react'\nimport Page from './Presenter'\n\nconst Container: React.VFC = () => {\n  return <Page />\n}\n\nexport default Container\n","import {\n  Account,\n  AggregateTransaction,\n  Deadline,\n  NetworkType,\n  TransferTransaction,\n  UInt64,\n  RepositoryFactoryHttp,\n  PlainMessage,\n  TransactionGroup,\n  Transaction,\n  Address,\n} from 'symbol-sdk'\n\nconst G_HASH =\n  '7FCCD304802016BEBBCD342A332F91FF1F3BB5E902988B352697BE245F48E836'\nconst NODE = 'https://sym-test-01.opening-line.jp:3001'\nconst EPOCH = 1637848847\n\nconst master =\n  '891D9D7E9672925123CFB7766CE9AC740BAFED43AE78F64CE2D296F54E62E57A'\n\nexport const getFile = async (hash: string): Promise<string> => {\n  return new Promise((resolve, reject) => {\n    checkConfirmed(hash)\n      .then((tx) => {\n        if (tx instanceof TransferTransaction) {\n          const h: string = JSON.parse(tx.message.payload).data\n          resolve(innerTxJoin(h))\n        }\n      })\n      .catch(() => {\n        const timer = setInterval(() => {\n          checkUnConfirmed(hash)\n            .then(() => {\n              setTimeout(() => {\n                checkConfirmed(hash)\n                  .then((tx) => {\n                    clearInterval(timer)\n                    if (tx instanceof TransferTransaction) {\n                      const h: string = JSON.parse(tx.message.payload).data\n                      resolve(innerTxJoin(h))\n                    }\n                  })\n                  .catch(() => {\n                    reject('404')\n                  })\n              }, 1000)\n            })\n            .catch(() => {\n              console.log('loading')\n            })\n        }, 1000)\n      })\n  })\n}\nexport const getApostilleFile = async (hash: string): Promise<string> => {\n  const arr = []\n\n  new Promise((resolve, reject) => {\n    checkConfirmed(hash).then((tx) => {\n      if (tx instanceof TransferTransaction) {\n        console.log('data', JSON.parse(tx.message.payload))\n      }\n    })\n  })\n  return new Promise((resolve, reject) => {\n    checkConfirmed(hash)\n      .then((tx) => {\n        if (tx instanceof TransferTransaction) {\n          const h: string = JSON.parse(tx.message.payload).data\n          console.log(\n            'previous hash',\n            JSON.parse(tx.message.payload).previousHash\n          )\n          resolve([innerTxJoin(h), innerTxJoin(h)].join(','))\n        }\n      })\n      .catch(() => {\n        const timer = setInterval(() => {\n          checkUnConfirmed(hash)\n            .then(() => {\n              setTimeout(() => {\n                checkConfirmed(hash)\n                  .then((tx) => {\n                    clearInterval(timer)\n                    if (tx instanceof TransferTransaction) {\n                      const h: string = JSON.parse(tx.message.payload).data\n                      resolve([innerTxJoin(h), innerTxJoin(h)].join(','))\n                    }\n                  })\n                  .catch(() => {\n                    reject('404')\n                  })\n              }, 1000)\n            })\n            .catch(() => {\n              console.log('loading')\n            })\n        }, 1000)\n      })\n  })\n}\n\nconst checkUnConfirmed = (hash: string): Promise<void> => {\n  const repositoryFactory = new RepositoryFactoryHttp(NODE)\n  const transactionHttp = repositoryFactory.createTransactionRepository()\n  return new Promise((res, rej) => {\n    transactionHttp\n      .getTransaction(hash, TransactionGroup.Unconfirmed)\n      .toPromise()\n      .then(() => {\n        rej()\n      })\n      .catch(() => {\n        res()\n      })\n  })\n}\n\nconst checkConfirmed = (hash: string): Promise<Transaction> => {\n  const repositoryFactory = new RepositoryFactoryHttp(NODE)\n  const transactionHttp = repositoryFactory.createTransactionRepository()\n  return new Promise((res, rej) => {\n    transactionHttp\n      .getTransaction(hash, TransactionGroup.Confirmed)\n      .toPromise()\n      .then((tx: Transaction) => {\n        res(tx)\n      })\n      .catch(() => {\n        rej()\n      })\n  })\n}\nconst innerTxJoin = async (hash: string): Promise<string> => {\n  const repositoryFactory = new RepositoryFactoryHttp(NODE)\n  const transactionHttp = repositoryFactory.createTransactionRepository()\n  let data = ''\n\n  return new Promise((resolve) => {\n    transactionHttp\n      .getTransaction(hash, TransactionGroup.Confirmed)\n      .toPromise()\n      .then((agtx) => {\n        const innerTxs = (agtx as AggregateTransaction).innerTransactions\n        for (const inTx of innerTxs) {\n          data += (inTx as TransferTransaction).message.payload\n        }\n        resolve(data)\n      })\n  })\n}\n\nexport const saveFile = async (\n  base64img: string,\n  gameMode: string,\n  previousHash: string\n): Promise<string> => {\n  const signer = Account.createFromPrivateKey(master, NetworkType.TEST_NET)\n  const acc = Address.createFromRawAddress(\n    'TDEC5VUUAUYHKI2Y45WBDMGODAS42P3PPCTMGUY'\n  )\n  const array: string[] = []\n  const MSG_SIZE = 1023\n  for (let i = 0; i <= Math.floor(base64img.length / MSG_SIZE); i++) {\n    const arr = base64img.slice(i * MSG_SIZE, (i + 1) * MSG_SIZE)\n    array.push(arr)\n  }\n  // console.log('arr', array)\n\n  //===================================================\n\n  const txs = []\n  const agtxs = []\n  const hashes: string[] = []\n  //===================================================\n\n  const repositoryFactory = new RepositoryFactoryHttp(NODE)\n  const transactionHttp = repositoryFactory.createTransactionRepository()\n\n  for (let i = 0; i < array.length; i++) {\n    // console.log(\"row\", array[i]);\n    const inTx = TransferTransaction.create(\n      Deadline.create(EPOCH),\n      acc,\n      [],\n      PlainMessage.create(array[i]),\n      NetworkType.TEST_NET\n    ).toAggregate(signer.publicAccount)\n\n    txs.push(inTx)\n\n    if (i % 100 !== 99 && i !== array.length - 1) {\n      continue\n    }\n\n    const agtx = AggregateTransaction.createComplete(\n      Deadline.create(EPOCH),\n      txs,\n      NetworkType.TEST_NET,\n      [],\n      UInt64.fromUint(10000000)\n    )\n\n    const signedTx = signer.sign(agtx, G_HASH)\n\n    transactionHttp.announce(signedTx).subscribe(\n      (x) => console.log(x),\n      (err) => console.error(err)\n    )\n    agtxs.push(signedTx)\n    hashes.push(signedTx.hash)\n\n    console.log('a', signedTx)\n  }\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      const data = JSON.stringify({\n        version: 1,\n        name: 'symbol-draw',\n        mode: gameMode,\n        previousHash: previousHash,\n        data: hashes.join(','),\n      })\n\n      const a = []\n      for (let i = 0; i <= Math.floor(data.length / MSG_SIZE); i++) {\n        a.push(data.substr(i * MSG_SIZE, MSG_SIZE))\n      }\n      const tx = TransferTransaction.create(\n        Deadline.create(EPOCH),\n        acc,\n        [],\n        PlainMessage.create(data),\n        NetworkType.TEST_NET,\n        UInt64.fromUint(2000000)\n      )\n\n      const st = signer.sign(tx, G_HASH)\n\n      transactionHttp.announce(st).subscribe(\n        (x) => console.log(x),\n        (err) => console.error(err)\n      )\n      resolve(st.hash)\n    }, 1000)\n  })\n}\n","import OutlinedInput from '@mui/material/OutlinedInput'\nimport FormControl from '@mui/material/FormControl'\nimport InputLabel from '@mui/material/InputLabel'\nimport React, { Ref } from 'react'\n\nexport type Props = {\n  inputRef: Ref<HTMLInputElement>\n  text: string\n}\n\nconst Component: React.VFC<Props> = ({ inputRef, text, ...args }) => {\n  return (\n    <FormControl fullWidth>\n      <InputLabel htmlFor=\"outlined-adornment-password\">{text}</InputLabel>\n      <OutlinedInput {...args} fullWidth label={text} inputRef={inputRef} />\n    </FormControl>\n  )\n}\n\nexport default Component\n","import * as React from 'react'\nimport styled from '@emotion/styled'\n\nexport type CenteringProps = {\n  direction?: string\n  nowrap?: boolean\n  vertical?: string\n  holizontal?: string\n  width?: string\n  height?: string\n  items?: string\n  children?: React.ReactNode\n}\n\nconst Component: React.VFC<CenteringProps> = ({\n  direction = 'row',\n  nowrap = false,\n  vertical = 'center',\n  holizontal = 'center',\n  width = '100%',\n  height = '100%',\n  items = 'normal',\n  children,\n}) => {\n  return (\n    <Style\n      direction={direction}\n      holizontal={holizontal}\n      vertical={vertical}\n      width={width}\n      height={height}\n      items={items}\n      wrap={nowrap ? 'nowrap' : 'wrap'}>\n      {children}\n    </Style>\n  )\n}\nexport default Component\n\nconst Style = styled('div')<{\n  direction: string\n  wrap: string\n  vertical: string\n  holizontal: string\n  width: string\n  height: string\n  items: string\n}>`\n  display: flex;\n  width: ${(props) => props.width};\n  height: ${(props) => props.height};\n  flex-direction: ${(props) => props.direction};\n  ${(props) => props.wrap && 'flex-wrap: wrap'};\n  justify-content: ${(props) => props.holizontal};\n  align-content: ${(props) => props.vertical};\n  align-items: ${(props) => props.items};\n`\n"],"sourceRoot":""}