{"version":3,"sources":["App.tsx"],"names":["App","React","useState","image","setImage","hash","setHash","EPOCH","NODE","signer","Account","createFromPrivateKey","NetworkType","TEST_NET","acc","tool","setTool","size","setSize","color","setColor","lines","setLines","isDrawing","useRef","stageRef","getFile","a","console","log","repositoryFactory","RepositoryFactoryHttp","transactionHttp","createTransactionRepository","innerTxJoin","getTransaction","TransactionGroup","Confirmed","toPromise","dataInfo","img","Image","src","FlexDiv","value","onChange","e","target","id","onClick","current","toDataURL","array","MSG_SIZE","i","Math","floor","length","arr","slice","push","txs","agtxs","hashes","inTx","TransferTransaction","create","Deadline","address","PlainMessage","toAggregate","publicAccount","agtx","AggregateTransaction","createComplete","UInt64","fromUint","signedTx","sign","announce","subscribe","x","err","error","join","type","StageDiv","width","height","onMouseDown","pos","getStage","getPointerPosition","points","y","onMousemove","point","lastLine","concat","splice","onMouseup","style","border","marginTop","ref","map","line","stroke","strokeWidth","tension","lineCap","globalCompositeOperation","CustomSketchPicker","onChangeComplete","hex","styled","div","SketchPicker","marginLeft","aggTx","data","innerTxs","innerTransactions","message","payload"],"mappings":"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","file":"static/js/11.b18bc1d3.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { Stage, Layer, Line, Image as KImage } from 'react-konva'\nimport { SketchPicker } from 'react-color'\nimport styled from 'styled-components'\nimport {\n  Account,\n  AggregateTransaction,\n  Deadline,\n  NetworkType,\n  TransferTransaction,\n  UInt64,\n  RepositoryFactoryHttp,\n  PlainMessage,\n  TransactionGroup,\n  Transaction,\n} from 'symbol-sdk'\nimport Konva from 'konva'\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nconst App = () => {\n  const [image, setImage] = React.useState<HTMLImageElement | null>(null)\n\n  const [hash, setHash] = useState(\n    '6F353427DA7F0DA7F32BB9D2029C632E01CC5E4E917DBB3F5D7C4790393FC9C3'\n  )\n  const EPOCH = 1637848847\n  const G_HASH =\n    '7FCCD304802016BEBBCD342A332F91FF1F3BB5E902988B352697BE245F48E836'\n  const NODE = 'https://sym-test-01.opening-line.jp:3001'\n  const prikey =\n    'B060A0B8F871B14062FECE3D7582ECC89D701C397C42B4F4CE25AEE908E1D489'\n  const signer = Account.createFromPrivateKey(prikey, NetworkType.TEST_NET)\n\n  const pri = '2923092B527C596847029201AEA7E5E5BA6A86D3FA007A2736D5FE4B396531E3'\n  const acc = Account.createFromPrivateKey(pri, NetworkType.TEST_NET)\n\n  const [tool, setTool] = React.useState('pen')\n  const [size, setSize] = React.useState(5)\n  const [color, setColor] = React.useState('#000000')\n  const [lines, setLines] = React.useState<any[]>([])\n  const isDrawing = React.useRef(false)\n  const stageRef = React.useRef<Konva.Stage | null>(null)\n\n  const handleMouseDown = (e: any) => {\n    isDrawing.current = true\n    const pos = e.target.getStage().getPointerPosition()\n    setLines([\n      ...lines,\n      {\n        tool,\n        points: [pos.x, pos.y],\n        color,\n        size,\n      },\n    ])\n  }\n\n  const saveFile = () => {\n    if (stageRef.current === null) return\n    const img = stageRef.current.toDataURL()\n\n    // console.log(img)\n    const array: string[] = []\n    const MSG_SIZE = 1023\n    for (let i = 0; i <= Math.floor(img.length / MSG_SIZE); i++) {\n      const arr = img.slice(i * MSG_SIZE, (i + 1) * MSG_SIZE)\n      array.push(arr)\n    }\n    console.log('arr', array)\n\n    //===================================================\n\n    const txs = []\n    const agtxs = []\n    const hashes = []\n    //===================================================\n\n    for (let i = 0; i < array.length; i++) {\n      // console.log(\"row\", array[i]);\n      const inTx = TransferTransaction.create(\n        Deadline.create(EPOCH),\n        acc.address,\n        [],\n        PlainMessage.create(array[i]),\n        NetworkType.TEST_NET\n      ).toAggregate(signer.publicAccount)\n\n      txs.push(inTx)\n\n      if (i % 100 !== 99 && i !== array.length - 1) {\n        continue\n      }\n\n      const agtx = AggregateTransaction.createComplete(\n        Deadline.create(EPOCH),\n        txs,\n        NetworkType.TEST_NET,\n        [],\n        UInt64.fromUint(2000000)\n      )\n\n      const signedTx = signer.sign(agtx, G_HASH)\n      agtxs.push(signedTx)\n      hashes.push(signedTx.hash)\n\n      const repositoryFactory = new RepositoryFactoryHttp(NODE)\n      const transactionHttp = repositoryFactory.createTransactionRepository()\n\n      console.log('a', signedTx)\n\n      transactionHttp.announce(signedTx).subscribe(\n        (x) => console.log(x),\n        (err) => console.error(err)\n      )\n\n      // const data = JSON.stringify({\n      //   version: 1,\n      //   mime: 'png',\n      //   name: 'test',\n      //   size: img.length,\n      //   data: hashes.join(',')\n      // })\n\n      // const PMSG_SIZE = 1023\n      // const a = []\n      // for (let i = 0; i <= Math.floor(data.length / PMSG_SIZE); i++) {\n      //   a.push(data.substr(i * PMSG_SIZE, PMSG_SIZE))\n      // }\n\n      // console.log(data)\n      // console.log(a)\n\n      // const tx = TransferTransaction.create(\n      //   Deadline.create(EPOCH),\n      //   acc.address,\n      //   [],\n      //   PlainMessage.create(data),\n      //   NetworkType.TEST_NET,\n      //   UInt64.fromUint(2000000)\n      // );\n\n      // const st = signer.sign(tx, G_HASH)\n\n      // console.log('tx', tx)\n      // console.log('st', st)\n\n      // transactionHttp.announce(st).subscribe(\n      //   (x) => console.log(x),\n      //   (err) => console.error(err)\n      // );\n    }\n\n    setHash(hashes.join(','))\n  }\n\n  const getFile = async () => {\n    console.log('hash', hash)\n    const repositoryFactory = new RepositoryFactoryHttp(NODE)\n    const transactionHttp = repositoryFactory.createTransactionRepository()\n    const dataInfo = innerTxJoin(\n      await transactionHttp\n        .getTransaction(hash, TransactionGroup.Confirmed)\n        .toPromise()\n    )\n    console.log('data', dataInfo)\n    const img = new Image()\n    img.src = dataInfo\n    setImage(img)\n  }\n\n  const handleMouseMove = (e: any) => {\n    // no drawing - skipping\n    if (!isDrawing.current) {\n      return\n    }\n    const stage = e.target.getStage()\n    const point = stage.getPointerPosition()\n    const lastLine = lines[lines.length - 1]\n    lastLine.points = lastLine.points.concat([point.x, point.y])\n    lines.splice(lines.length - 1, 1, lastLine)\n    setLines(lines.concat())\n  }\n\n  const handleImage = (e: any) => {\n    const img_url = URL.createObjectURL(e.target.files[0])\n    const img = new Image()\n    img.src = img_url\n    setImage(img)\n  }\n\n  const handleMouseUp = () => {\n    isDrawing.current = false\n  }\n\n  const handleChangeComplete = (color: any) => {\n    setColor(color.hex)\n  }\n\n  return (\n    <>\n      <FlexDiv>\n        <select\n          value={tool}\n          onChange={(e) => {\n            setTool(e.target.value)\n          }}>\n          <option value=\"pen\">ペン</option>\n          <option value=\"eraser\">消しゴム</option>\n        </select>\n        <select\n          value={size}\n          onChange={(e: any) => {\n            setSize(e.target.value)\n          }}>\n          <option value=\"3\">3</option>\n          <option value=\"5\">5</option>\n          <option value=\"10\">10</option>\n          <option value=\"15\">15</option>\n          <option value=\"20\">20</option>\n        </select>\n        {/* <input\n          type=\"file\"\n          accept=\"image/jpeg, image/png\"\n          onChange={(e) => handleImage(e)}\n        ></input> */}\n        <button id=\"save\" onClick={saveFile}>\n          PUSH\n        </button>\n        <input type=\"text\" onChange={(e) => setHash(e.target.value)} />\n        <button id=\"import\" onClick={getFile}>\n          PULL\n        </button>\n      </FlexDiv>\n      <FlexDiv>\n        <StageDiv>\n          <Stage\n            width={500}\n            height={500}\n            onMouseDown={handleMouseDown}\n            onMousemove={handleMouseMove}\n            onMouseup={handleMouseUp}\n            style={{\n              border: 'solid',\n              marginTop: '10px',\n            }}\n            ref={stageRef}>\n            <Layer>\n              {image !== null && <KImage image={image} />}\n              {lines.map((line, i) => (\n                <Line\n                  key={i}\n                  points={line.points}\n                  stroke={line.color}\n                  strokeWidth={line.size}\n                  tension={0.5}\n                  lineCap=\"round\"\n                  globalCompositeOperation={\n                    line.tool === 'eraser' ? 'destination-out' : 'source-over'\n                  }\n                />\n              ))}\n            </Layer>\n          </Stage>\n        </StageDiv>\n        <CustomSketchPicker\n          color={color}\n          onChangeComplete={handleChangeComplete}\n        />\n      </FlexDiv>\n    </>\n  )\n}\nexport default App\n\n// function downloadURI(uri: any, name: any) {\n//   var link = document.createElement(\"a\");\n//   link.download = name;\n//   link.href = uri;\n//   link.click();\n// }\n\n// function formatDate(date, format) {\n//   format = format.replace(/yyyy/g, date.getFullYear());\n//   format = format.replace(/MM/g, (\"0\" + (date.getMonth() + 1)).slice(-2));\n//   format = format.replace(/dd/g, (\"0\" + date.getDate()).slice(-2));\n//   format = format.replace(/HH/g, (\"0\" + date.getHours()).slice(-2));\n//   format = format.replace(/mm/g, (\"0\" + date.getMinutes()).slice(-2));\n//   format = format.replace(/ss/g, (\"0\" + date.getSeconds()).slice(-2));\n//   format = format.replace(/SSS/g, (\"00\" + date.getMilliseconds()).slice(-3));\n//   return format;\n// }\n\nfunction toArrayBuffer(buffer: any) {\n  const view = new Uint8Array(buffer.length)\n  for (let i = 0; i < buffer.length; ++i) {\n    view[i] = buffer[i]\n  }\n  return view\n}\n\nconst FlexDiv = styled.div`\n  display: flex;\n  justify-content: center;\n`\n\nconst StageDiv = styled.div`\n  background-color: #ffffff;\n`\n\nconst CustomSketchPicker = styled(SketchPicker)({\n  marginTop: '10px',\n  marginLeft: '20px',\n})\n\nfunction innerTxJoin(aggTx: Transaction) {\n  let data = ''\n  const innerTxs = (aggTx as AggregateTransaction).innerTransactions\n  for (const inTx of innerTxs) {\n    data += (inTx as TransferTransaction).message.payload\n  }\n  return data\n}\n"],"sourceRoot":""}