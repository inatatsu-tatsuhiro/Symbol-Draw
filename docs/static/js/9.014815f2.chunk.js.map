{"version":3,"sources":["components/elements/DropZone/index.tsx","features/audit/Presenter.tsx","features/audit/index.tsx","libs/Symbol/Apostille.ts"],"names":["Component","file","setFile","useState","hover","setHover","getI18nText","useI18n","onDrop","useCallback","console","log","useDropzone","getRootProps","getInputProps","Root","onMouseEnter","onMouseLeave","SIconButton","onClick","Tooltip","title","placement","Image","src","URL","createObjectURL","alt","name","Text","styled","Color","default","grayscale","Page","auditData","setAuditData","useEffect","audit","then","r","Wrapper","DropZone","Spacer","margin","TableContainer","component","Paper","Table","sx","minWidth","TableBody","TableRow","border","TableCell","align","apostilleAcount","plain","signer","hash","timestamp","Container","apiEndpoint","getTxHash","filename","match","length","getValidStatus","isValid","type","a","fileReader","fileBuf","Promise","resolve","reject","AuditService","apostilleAccount","status","t","JSON","parse","stringify","split","catch","e","error"],"mappings":"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","file":"static/js/9.014815f2.chunk.js","sourcesContent":["import React, { useCallback, useState } from 'react'\nimport { useDropzone } from 'react-dropzone'\nimport styled from '@emotion/styled'\nimport { MdOutlineDeleteForever } from 'react-icons/md'\nimport Color from '../../../utils/Color'\nimport { Tooltip } from '@mui/material'\n\nimport { useI18n } from '../../../utils/useI18n'\n\nexport interface Props {\n  file: File | null\n  setFile: (file: File | null) => void\n}\n\nconst Component: React.VFC<Props> = ({ file, setFile }) => {\n  const [hover, setHover] = useState(false)\n  const { getI18nText } = useI18n()\n  const onDrop = useCallback(\n    (file) => {\n      console.log('file', file)\n      setFile(file[0])\n    },\n    [setFile]\n  )\n  const { getRootProps, getInputProps } = useDropzone({ onDrop })\n\n  if (file !== null) {\n    return (\n      <Root\n        onMouseEnter={() => setHover(true)}\n        onMouseLeave={() => setHover(false)}>\n        {hover && (\n          <SIconButton onClick={() => setFile(null)}>\n            <Tooltip title=\"Delete\" placement=\"top\">\n              <MdOutlineDeleteForever />\n            </Tooltip>\n          </SIconButton>\n        )}\n        <Image src={URL.createObjectURL(file)} alt={file.name} />\n      </Root>\n    )\n  }\n\n  return (\n    <Root {...getRootProps()}>\n      <input {...getInputProps()} />\n      <Text>{getI18nText('component_dropzone')}</Text>\n    </Root>\n  )\n}\nexport default Component\n\nconst Root = styled('div')`\n  width: 100%;\n  height: 100%;\n  position: relative;\n  background: ${Color.default};\n\n  border: solid ${Color.grayscale} 1px;\n  border-radius: 32px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  text-align: center;\n`\n\nconst Text = styled('div')`\n  font-size: 24px;\n  color: ${Color.grayscale};\n`\n\nconst Image = styled('img')`\n  object-fit: contain;\n  width: 100%;\n  height: 100%;\n`\n\nconst SIconButton = styled('div')`\n  background: ${Color.default};\n  position: absolute;\n  width: 32px;\n  height: 32px;\n  top: 16px;\n  right: 16px;\n\n  display: flex;\n  border-radius: 100px;\n  justify-content: center;\n  align-items: center;\n`\n","import React, { useEffect, useState } from 'react'\nimport DropZone from '../../components/elements/DropZone'\nimport styled from '@emotion/styled'\n\nimport { audit, AuditData } from '../../libs/Symbol/Apostille'\n// import Button from '../../components/elements/Button'\n// import { useI18n } from '../../utils/useI18n'\nimport Spacer from '../../components/utils/Spacer'\nimport {\n  TableContainer,\n  Paper,\n  Table,\n  TableRow,\n  TableCell,\n  TableBody,\n} from '@mui/material'\n\nconst Page: React.VFC = () => {\n  const [file, setFile] = useState<File | null>(null)\n  // const { getI18nText } = useI18n()\n  const [auditData, setAuditData] = useState<AuditData | null>(null)\n  useEffect(() => {\n    if (file === null) {\n      return\n    }\n    console.log('audit')\n    audit(file).then((r) => {\n      console.log('r', r)\n      setAuditData(r)\n    })\n  }, [file])\n\n  if (file === null || auditData === null) {\n    return (\n      <div>\n        <Wrapper>\n          <DropZone file={file} setFile={setFile} />\n          <Spacer margin=\"8px\"></Spacer>\n        </Wrapper>\n      </div>\n    )\n  } else {\n    return (\n      <div>\n        <Wrapper>\n          <DropZone file={file} setFile={setFile} />\n          <Spacer margin=\"16px\">\n            <TableContainer component={Paper}>\n              <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\n                <TableBody>\n                  <TableRow\n                    sx={{\n                      '&:last-child td, &:last-child th': { border: 0 },\n                    }}>\n                    <TableCell align=\"right\">ApostilleAccount</TableCell>\n                    <TableCell align=\"right\">\n                      {auditData.apostilleAcount.plain()}\n                    </TableCell>\n                  </TableRow>\n                  <TableRow\n                    sx={{\n                      '&:last-child td, &:last-child th': { border: 0 },\n                    }}>\n                    <TableCell align=\"right\">SignerAccount</TableCell>\n                    <TableCell align=\"right\">\n                      {auditData.signer.plain()}\n                    </TableCell>\n                  </TableRow>\n                  <TableRow\n                    sx={{\n                      '&:last-child td, &:last-child th': { border: 0 },\n                    }}>\n                    <TableCell align=\"right\">TransactionHash</TableCell>\n                    <TableCell align=\"right\">{auditData.hash}</TableCell>\n                  </TableRow>\n                  <TableRow\n                    sx={{\n                      '&:last-child td, &:last-child th': { border: 0 },\n                    }}>\n                    <TableCell align=\"right\">TimeStamp</TableCell>\n                    <TableCell align=\"right\">{auditData.timestamp}</TableCell>\n                  </TableRow>\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </Spacer>\n        </Wrapper>\n      </div>\n    )\n  }\n}\n\nexport default Page\n\nconst Wrapper = styled('div')`\n  height: 400px;\n`\n","import React from 'react'\nimport Page from './Presenter'\n\nconst Container: React.VFC = () => {\n  return <Page />\n}\n\nexport default Container\n","import { format } from 'date-fns'\n// import config from 'utils/config/SymbolConfig'\nimport * as fileReader from 'promise-file-reader'\nimport {\n  ApostilleTransaction,\n  AuditService,\n  HashFunctionCreator,\n  HashingType,\n  IApostilleOptions,\n  IAuditResult,\n  IPartialTxAuditResult,\n} from 'simple-apostille-v2'\nimport {\n  Account,\n  SignedTransaction,\n  RepositoryFactoryHttp,\n  TransactionService,\n  Address,\n} from 'symbol-sdk'\n\nconst apiEndpoint = 'https://sym-test-01.opening-line.jp:3001' //config.SYMBOL_API_ENDPOINT\nconst generationHash =\n  '7FCCD304802016BEBBCD342A332F91FF1F3BB5E902988B352697BE245F48E836' //config.GENERATION_HASH_SEED\nconst feeMultiplier = 200 //config.FEE_MULTIPLIER\nconst epochAdjustment = 1637848847 //config.EPOCH_ADJUSTMENT\nconst networkType = 152 //config.NETWORK_TYPE\n\nexport type AuditData = {\n  signer: Address\n  apostilleAcount: Address\n  hash: string\n  status: number\n  timestamp: string\n}\n\nexport const getApostilleFileName = (\n  fileName: string,\n  txHash: string\n): string => {\n  const date = format(new Date(), 'yyyy-MM-dd')\n  const [fn, ext] = fileName.split('.')\n  const apostilleFileName = `${fn} -- Apostille TX ${txHash} -- ${date}.${ext}`\n  return apostilleFileName\n}\n\nexport const getFileHash = async (file: File): Promise<string> => {\n  const fileBuffer = await fileReader.readAsArrayBuffer(file)\n  const hashFunc = HashFunctionCreator.create(HashingType.Type.sha256)\n  return hashFunc.hashing(fileBuffer)\n}\n\nconst createAnnounceInfo = async (\n  hashedData: string,\n  fileName: string,\n  signer: Account\n) => {\n  const salt = String(new Date().getTime())\n  const apostilleTx = ApostilleTransaction.createFromHashedData(\n    hashedData,\n    HashingType.Type.sha256,\n    salt + fileName,\n    signer,\n    networkType,\n    generationHash,\n    feeMultiplier,\n    apiEndpoint,\n    epochAdjustment\n  )\n\n  return await apostilleTx.singedTransactionAndAnnounceType()\n}\n\nexport const createApostilleTransaction = async (\n  file: File,\n  signer: Account\n): Promise<unknown> => {\n  if (file === null || signer === null) return\n  try {\n    const fileHash = await getFileHash(file)\n    const announceInfo = await createAnnounceInfo(fileHash, file.name, signer)\n    if (announceInfo) {\n      return announceTransactionByComplete(announceInfo.signedTransaction)\n    }\n  } catch (err) {\n    console.log('err:', err)\n    return err\n  }\n}\n\nconst createRepositoryFactory = () => {\n  return new RepositoryFactoryHttp(apiEndpoint, {\n    generationHash,\n    networkType,\n    websocketUrl: `${apiEndpoint.replace('http', 'ws')}/ws`,\n    websocketInjected: WebSocket,\n  })\n}\nconst createTransactionService = () => {\n  const repositoryFactory = createRepositoryFactory()\n  return new TransactionService(\n    repositoryFactory.createTransactionRepository(),\n    repositoryFactory.createReceiptRepository()\n  )\n}\n\nconst createListener = () => {\n  const repositoryFactory = createRepositoryFactory()\n  return repositoryFactory.createListener()\n}\n\nconst announceTransactionByComplete = async (signedTx: SignedTransaction) => {\n  return new Promise((resolve, reject) => {\n    const transactionService = createTransactionService()\n    const listener = createListener()\n\n    if (transactionService && listener) {\n      listener\n        .open()\n        .then(() => {\n          transactionService.announce(signedTx, listener).subscribe(\n            (x) => {\n              listener.close()\n              console.log('complate')\n              resolve(x)\n            },\n            (err) => {\n              listener.close()\n              console.log('err:', err)\n              reject(err)\n            }\n          )\n        })\n        .catch((err) => {\n          console.log('err:', err)\n          reject(err)\n        })\n    }\n  })\n}\nconst createOption = (title: string): IApostilleOptions => {\n  return {\n    metadata: {\n      title: title,\n    },\n  }\n}\n\nconst getTxHash = (filename: string): string => {\n  const regexp = /--\\sApostille\\sTX\\s(\\w+)\\s--/\n  const match = filename.match(regexp)\n  if (match === null || match.length < 1) {\n    console.log('not match')\n    return ''\n  } else {\n    console.log('match')\n    return match[1]\n  }\n}\n\nconst getValidStatus = (r: IAuditResult | IPartialTxAuditResult): number => {\n  if (r.isValid) {\n    if (r.type === 0) return 0\n    if (r.type === 1) return 1\n  }\n  return -1\n}\n\nexport const audit = async (file: File): Promise<AuditData> => {\n  const fileBuf = await fileReader.readAsArrayBuffer(file)\n  const hash = getTxHash(file.name)\n  return new Promise((resolve, reject) => {\n    AuditService.audit(fileBuf, hash, apiEndpoint)\n      .then((r) => {\n        if (!r.signer || !r.apostilleAccount) {\n          // setOpen(true)\n          console.log('reject', r)\n          reject()\n        } else {\n          const status = getValidStatus(r)\n          const t: string =\n            JSON.parse(JSON.stringify(r)).timestamp.split('.')[0] || ''\n          resolve({\n            signer: r.signer,\n            apostilleAcount: r.apostilleAccount,\n            hash: hash,\n            status: status,\n            timestamp: t,\n          })\n        }\n      })\n      .catch((e) => {\n        console.error('ERROR')\n        console.error(e)\n        reject()\n        // setOpen(true)\n      })\n  })\n}\n"],"sourceRoot":""}